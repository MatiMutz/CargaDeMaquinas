@page "/Trazabilidad"
@page "/sc/Trazabilidad"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Pdf;
@using Syncfusion.Pdf.Graphics;
@using Syncfusion.Pdf.Grid;
@using System.Drawing;
@using System.IO;
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using System.Text.Json
@using Syncfusion.Blazor.Grids
@inject IJSRuntime JsRuntime
@inject CustomHttpClient Http
@using Syncfusion.Pdf.Tables
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="col-sm-3 my-1">
                <SfTextBox Placeholder="Número de Pedido" Input="OnInputPedido" @bind-Value="BoxPedido" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
            </div>
            <div class="col-sm-3 my-1">
                <SfTextBox Placeholder="Nombre de Cliente" Input="OnInputCliente" @bind-Value="BoxCliente" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
            </div>
            <div class="col-sm-3 my-1">
                <button type="submit" class="btn btn-primary" @onclick="@BuscarTrazabilidad">Buscar Pedido</button>
            </div>
            <div class="col-sm-3 my-1">
                <button type="submit" class="btn btn-primary" @onclick="@MostrarTrazabilidad">Mostrar Trazabilidad</button>
            </div>
        </div>
    </div>
</div>

<SfDialog Width="1000px" MinHeight="450px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsVisible">
    <DialogTemplates>
        <Content>
            <SfGrid @ref="Grid2" DataSource="@Busquedalist">
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                <GridEvents RowSelected="OnSelected" TValue="Pedidos"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(Pedidos.PEDIDO) HeaderText="Producto" Width="110px"></GridColumn>
                    <GridColumn Field=@nameof(Pedidos.DES_CLI) HeaderText="Descripcion" Width="150px"></GridColumn>
                </GridColumns>
            </SfGrid>
            @{
                if (Busquedalist.Count == CantidadMostrar)
                {
                    <div class="col-sm-3 my-1">
                        <button type="submit" class="btn btn-primary" @onclick="@AgregarValores">Buscar más</button>
                    </div>
                }
            }
        </Content>
    </DialogTemplates>
</SfDialog>
@{
    if (Showgrid == true)
    {
        <label class="centrado">Trazabilidad del Pedido Nro @TrzNro</label>
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <SfGrid ShowColumnChooser="true" AllowResizing="true" Width="auto" @ref="Grid" DataSource="@pedidos" AllowExcelExport="true" AllowGrouping="true" Toolbar="@Toolbaritems">
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                        <GridEvents OnToolbarClick="@ClickHandler" TValue="Pedidos"></GridEvents>
                        <GridFilterSettings Type="@Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(Pedidos.CG_ART) HeaderText="Producto" Width="55px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.DES_ART) HeaderText="Descripcion" Width="130px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.DESPACHO) HeaderText="Despacho" Width="60px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.LOTE) HeaderText="Lote" Width="110px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.FE_MOV) HeaderText="Fecha Movimiento" Width="110px"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
    }
    else
    {
        <label class="centrado">Debe buscar arriba una orden de armado para ver su trazabilidad.</label>
    }

}
<!--
<SfGrid AllowReordering="true" ShowColumnChooser="true" ShowColumnMenu="true" AllowResizing="true" Width="auto"
                            @ref="Grid" DataSource="@pedidos" AllowExcelExport="true" AllowGrouping="true" EnableVirtualization="true"
                            AllowSorting="true" AllowFiltering="true" Toolbar="@Toolbaritems">
-->
<style>
    .e-input-group.e-corner {
        border-radius: 4px;
    }

    label.centrado {
        margin: 0 auto;
        text-align: center;
    }
</style>

@code {
    protected SfGrid<Pedidos> Grid;
    protected SfGrid<Pedidos> Grid2;

    public bool Enabled = true;
    public bool Disabled = false;
    public bool Showgrid = false;

    protected List<Pedidos> pedidos = new List<Pedidos>();
    protected List<Pedidos> Pedidoslist = new List<Pedidos>();
    protected List<Pedidos> Busquedalist = new List<Pedidos>();
    protected string BoxPedido = "";
    protected string BoxCliente = "";
    protected string TrzNro = "";
    protected int CantidadMostrar = 100;
    protected bool IsVisible { get; set; } = false;
    public int GridRowHeight = 20;

    protected DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "1100px" };

    protected List<Object> Toolbaritems = new List<Object>(){
            "Search",
            "Print",
            "ExcelExport",
            "ColumnChooser"
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "small", TooltipText = "20px", PrefixIcon = "e-big-icon", Id = "small", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right},
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "medium", TooltipText = "40px", PrefixIcon = "e-medium-icon", Id = "medium", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right},
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "big", TooltipText = "60px", PrefixIcon = "e-small-icon", Id = "big", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right}
        };
    public async Task ClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
        {
            await this.Grid.ExcelExport();
        }
        if (args.Item.Text == "Print")
        {
            await this.Grid.Print();
        }
        if (args.Item.Text == "small")
        {
            GridRowHeight = 20;
        }
        if (args.Item.Text == "medium")
        {
            GridRowHeight = 40;
        }
        if (args.Item.Text == "big")
        {
            GridRowHeight = 60;
        }
    }

    public void OnSelected()
    {
        BoxPedido = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().PEDIDO.ToString(); // return the details of selected record
        TrzNro = BoxPedido;
        BoxCliente = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().DES_CLI; // return the details of selected record
        CantidadMostrar = 0;
        IsVisible = false;
    }

    protected async Task OnInputPedido(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorPedido/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxCliente = Pedidoslist.FirstOrDefault().DES_CLI;
        }
        else
        {
            BoxCliente = "";
        }
    }

    protected async Task OnInputCliente(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorCliente/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxPedido = Pedidoslist.FirstOrDefault().PEDIDO.ToString();
            TrzNro = BoxPedido;
        }
        else
        {
            BoxPedido = "";
        }
    }

    protected async Task BuscarTrazabilidad()
    {
        CantidadMostrar = 100;
        if (BoxCliente == "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/Vacio/{CantidadMostrar}");
        }
        else if (BoxPedido == "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/{BoxCliente}/{CantidadMostrar}");
        }
        else
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/{BoxCliente}/{CantidadMostrar}");
        }
        IsVisible = true;
    }
    protected async Task MostrarTrazabilidad()
    {
        pedidos = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/MostrarTrazabilidad/{BoxPedido}");
        Showgrid = true;
        BoxPedido = "";
        BoxCliente = "";
    }
    protected async Task AgregarValores()
    {
        CantidadMostrar = CantidadMostrar + 100;
        if (BoxCliente == "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/Vacio/{CantidadMostrar}");
        }
        else if (BoxPedido == "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/{BoxCliente}/{CantidadMostrar}");
        }
        else
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/{BoxCliente}/{CantidadMostrar}");
        }
    }
}
