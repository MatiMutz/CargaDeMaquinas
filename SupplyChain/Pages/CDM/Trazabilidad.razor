@page "/Trazabilidad"
@page "/sc/Trazabilidad"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Pdf;
@using Syncfusion.Pdf.Graphics;
@using Syncfusion.Pdf.Grid;
@using System.Drawing;
@using System.IO;
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using System.Text.Json
@using Syncfusion.Blazor.Grids
@inject IJSRuntime JsRuntime
@inject Microsoft.JSInterop.IJSRuntime JS
@inject CustomHttpClient Http
@using Syncfusion.Blazor.PdfViewerServer;
@using Syncfusion.Pdf.Tables
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="col-sm-3 my-1">
                <SfTextBox Placeholder="Número de Pedido" Input="OnInputPedido" @bind-Value="BoxPedido" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
            </div>
            <div class="col-sm-3 my-1">
                <SfTextBox Placeholder="Nombre de Cliente" Input="OnInputCliente" @bind-Value="BoxCliente" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
            </div>
            <div class="col-sm-3 my-1">
                <SfTextBox Placeholder="Codigo de Producto" Input="OnInputCodigo" @bind-Value="BoxCodigo" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3 my-1">
                <button type="submit" class="btn btn-primary" @onclick="@BuscarTrazabilidad">Buscar Pedido</button>
            </div>
            <div class="col-sm-3 my-1">
                <button type="submit" class="btn btn-primary" @onclick="@MostrarTrazabilidad">Mostrar Trazabilidad</button>
            </div>
            <div class="col-sm-3 my-1">
                <button type="submit" class="btn btn-primary" @onclick="@Catalogo">Imprimir catálogo</button>
            </div>
        </div>
    </div>
</div>

<SfDialog Width="1000px" MinHeight="450px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsVisible">
    <DialogTemplates>
        <Content>
            <SfGrid @ref="Grid2" DataSource="@Busquedalist">
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                <GridEvents RowSelected="OnSelected" TValue="Pedidos"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(Pedidos.PEDIDO) HeaderText="Pedido" Width="110px"></GridColumn>
                    <GridColumn Field=@nameof(Pedidos.DES_CLI) HeaderText="Cliente" Width="150px"></GridColumn>
                    <GridColumn Field=@nameof(Pedidos.CG_ART) HeaderText="Codigo" Width="150px"></GridColumn>
                    <GridColumn Field=@nameof(Pedidos.DES_ART) HeaderText="Descripcion" Width="150px"></GridColumn>
                </GridColumns>
            </SfGrid>
            @{
                if (Busquedalist.Count == CantidadMostrar)
                {
                    <div class="col-sm-3 my-1">
                        <button type="submit" class="btn btn-primary" @onclick="@AgregarValores">Buscar más</button>
                    </div>
                }
            }
        </Content>
    </DialogTemplates>
</SfDialog>

@{
    <SfDialog Width="1000px" MinHeight="450px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsVisibleCertificado">
        <DialogTemplates>
            <Content>
                <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="pills-home-tab" data-toggle="pill" href="#pills-Certificado" role="tab" aria-controls="pills-home" aria-selected="true">Certificado</a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" id="pills-profile-tab" data-toggle="pill" href="#pills-Despiece" role="tab" aria-controls="pills-profile" aria-selected="false">Despiece</a>
                    </li>
                </ul>

                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-Certificado" role="tabpanel" aria-labelledby="pills-home-tab">
                        <div>
                            @{

                                if (ShowCertificado == true)
                                {
                                    <div class="control-section">
                                        <SfPdfViewerServer DocumentPath="@ruta"></SfPdfViewerServer>
                                    </div>
                                }
                                else
                                {
                                    <span>No existe Certificado asociado</span>
                                }
                            }
                        </div>
                    </div>
                    <div class="tab-pane fade show active" id="pills-Despiece" role="tabpanel" aria-labelledby="pills-home-tab">
                        <div>
                            @{
                                if (OF is null || OF.Count() < 0)
                                {
                                    <span>Cargando...</span>
                                }
                                else
                                {
                                    <div class="col-lg-12 control-section">
                                        <div class="content-wrapper">
                                            <div class="row">
                                                <SfGrid ShowColumnChooser="true" DataSource="@OF">
                                                    <GridEvents RowSelected="OnSelectedCertificado" TValue="Pedidos"></GridEvents>
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(Pedidos.CG_ART) HeaderText="Producto" Width="55px"></GridColumn>
                                                        <GridColumn Field=@nameof(Pedidos.DES_ART) HeaderText="Descripcion" Width="130px"></GridColumn>
                                                        <GridColumn Field=@nameof(Pedidos.DESPACHO) HeaderText="Despacho" Width="60px"></GridColumn>
                                                        <GridColumn Field=@nameof(Pedidos.LOTE) HeaderText="Lote" Width="110px"></GridColumn>
                                                        <GridColumn Field=@nameof(Pedidos.FE_MOV) HeaderText="Fecha Movimiento" Width="110px"></GridColumn>
                                                    </GridColumns>
                                                </SfGrid>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
}

@{
    if (Showgrid == true)
    {
        <form>
            @{

                var lote = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().LOTE.Trim();
                if (lote == null)
                {
                    lote = "";
                }
                var modelo = prodList.Where(t => t.CG_PROD.ToString() == CodNro).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM1.Trim();
                if (modelo == null)
                {
                    modelo = "";
                }
                var medida = prodList.Where(t => t.CG_PROD.ToString() == CodNro).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM2.Trim();
                if (medida == null)
                {
                    medida = "";
                }
                var orificio = prodList.Where(t => t.CG_PROD.ToString() == CodNro).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM3.Trim();
                if (orificio == null)
                {
                    orificio = "";
                }
                var area = prodList.Where(t => t.CG_PROD.ToString() == CodNro).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM4.Trim();
                if (area == null)
                {
                    area = "";
                }
                var serie = prodList.Where(t => t.CG_PROD.ToString() == CodNro).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM5.Trim();
                if (serie == null)
                {
                    serie = "";
                }
                var tipo = prodList.Where(t => t.CG_PROD.ToString() == CodNro).OrderByDescending(t => t.CG_PROD).FirstOrDefault().CAMPOCOM6.Trim();
                if (tipo == null)
                {
                    tipo = "";
                }
                var presion = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM1.Trim();
                if (presion == null)
                {
                    presion = "";
                }
                var resorte = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM2.Trim();
                if (resorte == null)
                {
                    resorte = "";
                }
                var fluido = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM3.Trim();
                if (fluido == null)
                {
                    fluido = "";
                }
                var presAj = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM4.Trim();
                if (presAj == null)
                {
                    presAj = "";
                }
                var ctpre = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM5.Trim();
                if (ctpre == null)
                {
                    ctpre = "";
                }
                var temp = PedCliList.Where(t => t.PEDIDO.ToString() == TrzNro).OrderByDescending(t => t.PEDIDO).FirstOrDefault().CAMPOCOM6.Trim();
                if (temp == null)
                {
                    temp = "";
                }
            }
            <div class="row">

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Trazabilidad del Número de Pedido @TrzNro"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Lote: @lote"
                           readonly />
                </div>

            </div>

            <div class="row">

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Modelo: @modelo"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Medida: @medida"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Orificio: @orificio"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Area: @area"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Serie: @serie"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Tipo: @tipo"
                           readonly />
                </div>

            </div>

            <div class="row">

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Presion: @presion"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Resorte: @resorte"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Fluido: @fluido"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="P. Aj Banco: @presAj"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Contrapresión: @ctpre"
                           readonly />
                </div>

                <div class="col">
                    <input type="text"
                           class="form-control"
                           placeholder="Temperatura: @temp"
                           readonly />
                </div>

            </div>
        </form>
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <SfGrid ShowColumnChooser="true" AllowResizing="true" Width="auto" @ref="Grid" DataSource="@pedidos" AllowExcelExport="true" AllowGrouping="true" Toolbar="@Toolbaritems">
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                        <GridEvents RowSelected="OnSelectedCertificado" OnToolbarClick="@ClickHandler" TValue="Pedidos"></GridEvents>
                        <GridFilterSettings Type="@Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                        <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(Pedidos.CG_ART) HeaderText="Producto" Width="55px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.DES_ART) HeaderText="Descripcion" Width="130px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.DESPACHO) HeaderText="Despacho" Width="60px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.LOTE) HeaderText="Lote" Width="110px"></GridColumn>
                            <GridColumn Field=@nameof(Pedidos.FE_MOV) HeaderText="Fecha Movimiento" Width="110px"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
    }
    else
    {
        <label class="centrado">Debe buscar arriba una orden de armado para ver su trazabilidad.</label>
    }

}
<style>
    .e-input-group.e-corner {
        border-radius: 4px;
    }

    label.centrado {
        margin: 0 auto;
        text-align: center;
    }
</style>

@code {
    protected SfGrid<Pedidos> Grid;
    protected SfGrid<Pedidos> Grid2;
    protected SfGrid<Pedidos> Grid3;

    public bool Enabled = true;
    public bool Disabled = false;
    public bool Showgrid = false;
    public bool ShowCertificado = false;

    protected List<Pedidos> pedidos = new List<Pedidos>();
    protected List<Pedidos> Pedidoslist = new List<Pedidos>();
    protected List<Pedidos> Busquedalist = new List<Pedidos>();
    protected List<Pedidos> OF = new List<Pedidos>();
    protected List<PedCli> PedCliList = new List<PedCli>();
    protected List<Prod> prodList = new List<Prod>();
    protected List<Solution> rutas;
    protected string ruta;
    protected string BoxPedido = "";
    protected string BoxCliente = "";
    protected string BoxCodigo = "";
    protected string TrzNro = "";
    protected string CodNro = "";
    protected string NroCertificado = "";
    protected int CantidadMostrar = 100;
    protected bool IsVisible { get; set; } = false;
    protected bool IsVisibleCertificado { get; set; } = false;
    public int GridRowHeight = 20;

    protected DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "1100px" };

    protected List<Object> Toolbaritems = new List<Object>(){
            "Search",
            "Print",
            "ExcelExport",
            "ColumnChooser"
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "small", TooltipText = "20px", PrefixIcon = "e-big-icon", Id = "small", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right},
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "medium", TooltipText = "40px", PrefixIcon = "e-medium-icon", Id = "medium", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right},
            //new Syncfusion.Blazor.Navigations.ItemModel { Text = "big", TooltipText = "60px", PrefixIcon = "e-small-icon", Id = "big", Align = Syncfusion.Blazor.Navigations.ItemAlign.Right}
        };

    protected override async Task OnInitializedAsync()
    {
        rutas = await Http.GetFromJsonAsync<List<Solution>>("api/Solution");
        PedCliList = await Http.GetFromJsonAsync<List<PedCli>>("api/PedCli/GetPedidos");
        prodList = await Http.GetFromJsonAsync<List<Prod>>("api/Prod/GetPedidos");

        await base.OnInitializedAsync();
    }

    public async Task ClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
        {
            await this.Grid.ExcelExport();
        }
        if (args.Item.Text == "Print")
        {
            await this.Grid.Print();
        }
    }

    public void OnSelected()
    {
        BoxPedido = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().PEDIDO.ToString(); // return the details of selected record
        TrzNro = BoxPedido;
        BoxCliente = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().DES_CLI; // return the details of selected record
        BoxCodigo = this.Grid2.GetSelectedRecords().Result.FirstOrDefault().CG_ART; // return the details of selected record
        CodNro = BoxCodigo;
        CantidadMostrar = 0;
        IsVisible = false;
    }

    public async void OnSelectedCertificado()
    {
        IsVisibleCertificado = true;
        if (!String.IsNullOrEmpty(this.Grid.GetSelectedRecords().Result.FirstOrDefault().DESPACHO))
        {
            string parametro = this.Grid.GetSelectedRecords().Result.FirstOrDefault().LOTE.Substring(3).Trim();
            OF = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorOF/{parametro}");
            NroCertificado = this.Grid.GetSelectedRecords().Result.FirstOrDefault().DESPACHO;
            if (rutas != null)
            {
                @foreach (Solution rutaX in rutas)
                {
                    if (rutaX.CAMPO == "RUTATRAZABILIDAD")
                    {
                        // Only get files that begin with the letter "c".
                        ruta = rutaX.VALORC + NroCertificado.Trim() + ".pdf";
                        if (File.Exists(ruta))
                        {
                            IsVisibleCertificado = true;
                            ShowCertificado = true;
                        }
                        else
                        {
                            IsVisibleCertificado = true;
                            ShowCertificado = false;
                        }
                    }
                }
            }
        }
    }

    protected async Task OnInputPedido(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorPedido/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxCliente = Pedidoslist.FirstOrDefault().DES_CLI;
            BoxCodigo = Pedidoslist.FirstOrDefault().CG_ART;
        }
        else
        {
            BoxCliente = "";
            BoxCodigo = "";
        }
    }

    protected async Task OnInputCodigo(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorCodigo/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxCliente = Pedidoslist.FirstOrDefault().DES_CLI;
            BoxPedido = Pedidoslist.FirstOrDefault().PEDIDO.ToString();
        }
        else
        {
            BoxCliente = "";
            BoxPedido = "";
        }
    }

    protected async Task OnInputCliente(InputEventArgs args)
    {
        Pedidoslist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarPorCliente/{args.Value}");
        if (Pedidoslist.Count > 0)
        {
            BoxPedido = Pedidoslist.FirstOrDefault().PEDIDO.ToString();
            TrzNro = BoxPedido;
            BoxCodigo = Pedidoslist.FirstOrDefault().CG_ART;
        }
        else
        {
            BoxPedido = "";
            BoxCodigo = "";
        }
    }

    protected async Task BuscarTrazabilidad()
    {
        CantidadMostrar = 100;
        if (BoxPedido != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/Vacio/Vacio/{CantidadMostrar}");
        }
        else if (BoxCliente != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/{BoxCliente}/Vacio/{CantidadMostrar}");
        }
        else if (BoxCodigo != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/Vacio/{BoxCodigo}/{CantidadMostrar}");
        }
        else
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/{BoxCliente}/{BoxCodigo}/{CantidadMostrar}");
        }
        IsVisible = true;
    }
    protected async Task MostrarTrazabilidad()
    {
        pedidos = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/MostrarTrazabilidad/{BoxPedido}");
        Showgrid = true;
        BoxPedido = "";
        BoxCliente = "";
        BoxCodigo = "";
    }
    protected async Task Catalogo()
    {
        //Create a new PDF document
        PdfDocument document = new PdfDocument();
        //Create the page
        PdfPage page = document.Pages.Add();
        //Create PDF graphics for the page
        FileStream fontStream = new FileStream("wwwroot\\Calibri 400.ttf", FileMode.Open, FileAccess.Read);
        //Create a PdfGrid
        PdfGrid pdfGrid = new PdfGrid();

        PdfGraphics graphics = page.Graphics;
        //PdfFont font = new PdfStandardFont(PdfFontFamily.Courier, 10, PdfFontStyle.Bold);
        //PdfFont font = new PdfTrueTypeFont("wwwroot\\Calibri 400.ttf", 24);
        PdfFont font = new PdfTrueTypeFont(fontStream, 10, PdfFontStyle.Bold);

        //Create and customize the string formats
        PdfStringFormat Centrado = new PdfStringFormat();
        Centrado.Alignment = PdfTextAlignment.Center;
        Centrado.LineAlignment = PdfVerticalAlignment.Middle;
        //Create and customize the string formats
        PdfStringFormat Izquierda = new PdfStringFormat();
        Izquierda.Alignment = PdfTextAlignment.Left;
        Izquierda.LineAlignment = PdfVerticalAlignment.Middle;
        //Add columns to PdfGrid
        for (int i = 0; i < 6; i++)
        {
            PdfGridColumn column = pdfGrid.Columns.Add();
            if (i == 0 || i == 1 || i == 4 || i == 5)
            {
                column.Width = 64;
            }
            if (i == 2 || i == 3)
            {

                column.Width = 128;
            }
        }
        //Add rows to PdfGrid
        for (int i = 0; i < 32; i++)
        {
            PdfGridRow row = pdfGrid.Rows.Add();
            if (i == 0 || i == 1 || i == 2 || i == 3 || i == 7 || i == 17 || i == 21)
            {
                row.Height = 26;
            }
            else if (i == 31)
            {
                row.Height = 47;
            }
            else
            {
                row.Height = 22;
            }
        }
        //Load the image from the stream
        FileStream fs = new FileStream("wwwroot\\logo_aerre.jpg", FileMode.Open);
        FileStream IMR = new FileStream("wwwroot\\IMR.jpg", FileMode.Open);
        //Add RowSpan
        PdfGridCell gridCell = pdfGrid.Rows[0].Cells[0];
        gridCell.ColumnSpan = 2;
        gridCell.RowSpan = 2;
        gridCell.StringFormat = Centrado;
        gridCell.Value = new PdfTextElement("ARBROS S.A.", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado); 
        //Add RowSpan
        PdfGridCell gridCell2 = pdfGrid.Rows[0].Cells[2];
        gridCell2.ColumnSpan = 2;
        gridCell2.RowSpan = 2;
        gridCell2.StringFormat = Centrado;
        gridCell2.Value = new PdfTextElement("ACTA DE INSPECCIÓN", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell3 = pdfGrid.Rows[2].Cells[2];
        gridCell3.ColumnSpan = 2;
        gridCell3.RowSpan = 2;
        gridCell3.StringFormat = Centrado;
        gridCell3.Value = new PdfTextElement("VALVULAS DE SEGURIDAD Y ALIVIO", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell4 = pdfGrid.Rows[0].Cells[4];
        gridCell4.ColumnSpan = 2;
        gridCell4.RowSpan = 2;
        gridCell4.StringFormat = Centrado;
        gridCell4.Value = new PdfTextElement($"Cliente: \n {Pedidoslist.FirstOrDefault().DES_CLI.ToString()}", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell5 = pdfGrid.Rows[2].Cells[4];
        gridCell5.ColumnSpan = 2;
        gridCell5.RowSpan = 2;
        gridCell5.StringFormat = Centrado;
        gridCell5.Value = new PdfTextElement($"O.C.I.: {Pedidoslist.FirstOrDefault().PEDIDO.ToString()} \n {DateTime.Now.Day} / {DateTime.Now.Month} / {DateTime.Now.Year}", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell6 = pdfGrid.Rows[2].Cells[0];
        gridCell6.ColumnSpan = 2;
        gridCell6.RowSpan = 2;
        gridCell6.StringFormat = Centrado;
        gridCell6.Value = new PdfBitmap(fs);


        //Add RowSpan
        PdfGridCell gridCell8 = pdfGrid.Rows[4].Cells[0];
        gridCell8.ColumnSpan = 2;
        gridCell8.StringFormat = Izquierda;
        gridCell8.Value = new PdfTextElement($"   GENERALIDADES:", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        //Add RowSpan
        PdfGridCell gridCellx = pdfGrid.Rows[4].Cells[2];
        gridCellx.ColumnSpan = 1;
        gridCellx.StringFormat = Izquierda;
        gridCellx.Value = $"   Orden de compra: \n   Remito de entrega:";
        //Add RowSpan
        PdfGridCell gridCell9 = pdfGrid.Rows[4].Cells[3];
        gridCell9.ColumnSpan = 3;
        gridCell9.StringFormat = Izquierda;
        gridCell9.Value = $"   {PedCliList.FirstOrDefault().ORCO.ToString()} \n res remito";
        //Add RowSpan
        PdfGridCell gridCell10 = pdfGrid.Rows[5].Cells[0];
        gridCell10.ColumnSpan = 2;
        gridCell10.RowSpan = 8;
        gridCell10.StringFormat = Izquierda;
        gridCell10.Value = new PdfTextElement(" DATOS DE PLACA", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);

        //Add RowSpan
        PdfGridCell gridCell11 = pdfGrid.Rows[5].Cells[2];
        gridCell11.ColumnSpan = 1;
        gridCell11.RowSpan = 8;
        gridCell11.StringFormat = Izquierda;
        gridCell11.Value = $" Linea de Producto: \n Nro de Serie:\n TAG: \n Medida (Ent x Sal):\n Clase (Ent x Sal):\n Orif. API 526 / Area:\n Presión de Apertura:\n Contrapresión:\n Presion de ajuste en Banco\n Fluido\n Temperatura:\nCodigo de Resorte: \n Código de la válvula: ";
        //Add RowSpan
        PdfGridCell gridCell16 = pdfGrid.Rows[5].Cells[3];
        gridCell16.ColumnSpan = 3;
        gridCell16.RowSpan = 8;

        gridCell16.StringFormat = Izquierda;
        gridCell16.Value = new PdfTextElement($"   mas datos", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell14 = pdfGrid.Rows[6].Cells[0];
        gridCell14.ColumnSpan = 3;
        gridCell14.StringFormat = Izquierda;
        gridCell14.Value = $"   Mantenimiento anterior: ";
        //Add RowSpan
        PdfGridCell gridCell15 = pdfGrid.Rows[6].Cells[3];
        gridCell15.ColumnSpan = 3;
        gridCell15.StringFormat = Izquierda;
        gridCell15.Value = $"   Fecha de mantenimiento anterior: ";
        //Add RowSpan
        PdfGridCell gridCell17 = pdfGrid.Rows[7].Cells[0];
        gridCell17.ColumnSpan = 6;
        gridCell17.StringFormat = Centrado;
        gridCell17.Value = new PdfTextElement("DATOS DE PLACA", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);
        //Add RowSpan
        PdfGridCell gridCell18 = pdfGrid.Rows[8].Cells[0];
        gridCell18.ColumnSpan = 3;
        gridCell18.StringFormat = Izquierda;
        gridCell18.Value = $"   TAG: ";
        //Add RowSpan
        PdfGridCell gridCell19 = pdfGrid.Rows[8].Cells[3];
        gridCell19.ColumnSpan = 3;
        gridCell19.StringFormat = Izquierda;
        gridCell19.Value = new PdfTextElement($"   Marca: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell20 = pdfGrid.Rows[9].Cells[0];
        gridCell20.ColumnSpan = 3;
        gridCell20.StringFormat = Izquierda;
        gridCell20.Value = new PdfTextElement($"   Número de serie: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell21 = pdfGrid.Rows[9].Cells[3];
        gridCell21.ColumnSpan = 3;
        gridCell21.StringFormat = Izquierda;
        gridCell21.Value = new PdfTextElement($"   Modelo: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell22 = pdfGrid.Rows[10].Cells[0];
        gridCell22.ColumnSpan = 3;
        gridCell22.StringFormat = Izquierda;
        gridCell22.Value = new PdfTextElement($"   Medida: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell23 = pdfGrid.Rows[10].Cells[3];
        gridCell23.ColumnSpan = 3;
        gridCell23.StringFormat = Izquierda;
        gridCell23.Value = new PdfTextElement($"   Clase: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell24 = pdfGrid.Rows[11].Cells[0];
        gridCell24.ColumnSpan = 3;
        gridCell24.StringFormat = Izquierda;
        gridCell24.Value = new PdfTextElement($"   Orificio: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell25 = pdfGrid.Rows[11].Cells[3];
        gridCell25.ColumnSpan = 3;
        gridCell25.StringFormat = Izquierda;
        gridCell25.Value = new PdfTextElement($"   Año: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell26 = pdfGrid.Rows[12].Cells[0];
        gridCell26.ColumnSpan = 3;
        gridCell26.StringFormat = Izquierda;
        gridCell26.Value = new PdfTextElement($"   Area:", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell27 = pdfGrid.Rows[12].Cells[3];
        gridCell27.ColumnSpan = 3;
        gridCell27.StringFormat = Izquierda;
        gridCell27.Value = $"   Fluido:";
        //Add RowSpan
        PdfGridCell gridCell28 = pdfGrid.Rows[13].Cells[0];
        gridCell28.ColumnSpan = 2;
        gridCell28.RowSpan = 2;

        gridCell28.StringFormat = Izquierda;
        gridCell28.Value = new PdfTextElement("CONTROL DIMENSIONAL", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);


        //Add RowSpan
        //Add RowSpan
        PdfGridCell gridCellX2 = pdfGrid.Rows[13].Cells[2];
        gridCellX2.ColumnSpan = 1;
        gridCellX2.StringFormat = Izquierda;
        gridCellX2.RowSpan = 2;

        gridCellX2.Value = $"ANSI B-16.5 (Ent-Sal) \n Roscas (Ent-Sal) \n API 526";
        //Add RowSpan
        PdfGridCell gridCell29 = pdfGrid.Rows[13].Cells[3];
        gridCell29.ColumnSpan = 3;
        gridCell29.RowSpan = 2;

        gridCell29.StringFormat = Izquierda;
        gridCell29.Value = new PdfTextElement($"   Presión Bar", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);
        //Add RowSpan
        PdfGridCell gridCell30 = pdfGrid.Rows[14].Cells[0];
        gridCell30.ColumnSpan = 3;
        gridCell30.StringFormat = Izquierda;
        //if (selectedRecord.CONTRAPRESION == "Atm.")
        //{
        //    gridCell30.Value = $"   Contrapresión: ";
        //}
        //else
        //{
        //    gridCell30.Value = $"   Contrapresión: Bar";
        //}
        //Add RowSpan
        PdfGridCell gridCell31 = pdfGrid.Rows[14].Cells[3];
        gridCell31.ColumnSpan = 3;
        gridCell31.StringFormat = Izquierda;
        gridCell31.Value = $"   Tipo:";
        //Add RowSpan
        PdfGridCell gridCell32 = pdfGrid.Rows[15].Cells[0];
        gridCell32.ColumnSpan = 2;
        gridCell32.RowSpan = 8;

        gridCell32.StringFormat = Izquierda;
        gridCell32.Value = new PdfTextElement("PRUEBA HIDRAULICA Y MATERIALES", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);







        //Add RowSpan

        PdfGridCell gridCell33 = pdfGrid.Rows[15].Cells[2];
        gridCell33.ColumnSpan = 1;
        gridCell33.RowSpan = 2;

        gridCell33.StringFormat = Izquierda;
        gridCell33.Value = $"   Material Disco \n Identificación Disco \n Presión de Prueba Hidráulica";

        //Add RowSpan
        PdfGridCell gridCellx8 = pdfGrid.Rows[15].Cells[3];
        gridCellx8.ColumnSpan = 3;
        gridCellx8.RowSpan = 2;

        gridCellx8.StringFormat = Izquierda;
        gridCellx8.Value = $"   PRUEBA HIDRAULICA Y MATERIALES ";

        //

        //Add RowSpan
        PdfGridCell gridCellx6 = pdfGrid.Rows[17].Cells[2];
        gridCellx6.ColumnSpan = 1;
        gridCellx6.RowSpan = 2;

        gridCellx6.StringFormat = Izquierda;
        gridCellx6.Value = $"   Material Tobera \n Identificación Tobera \n Presión de Prueba Hidráulica";

        //Add RowSpan
        PdfGridCell gridCellx12 = pdfGrid.Rows[17].Cells[3];
        gridCellx12.ColumnSpan = 3;
        gridCellx12.RowSpan = 2;

        gridCellx12.StringFormat = Izquierda;
        gridCellx12.Value = $"   resp 2";

        //

        //Add RowSpan
        PdfGridCell gridCellx10 = pdfGrid.Rows[19].Cells[2];
        gridCellx10.ColumnSpan = 1;
        gridCellx10.RowSpan = 2;

        gridCellx10.StringFormat = Izquierda;
        gridCellx10.Value = $"   Material Cuerpo \n Identificación Cuerpo \n Presión de Prueba Hidráulica";

        //Add RowSpan
        PdfGridCell gridCellx18 = pdfGrid.Rows[19].Cells[3];
        gridCellx18.ColumnSpan = 3;
        gridCellx18.RowSpan = 2;

        gridCellx18.StringFormat = Izquierda;
        gridCellx18.Value = $"   PRUEBA HIDRAULICA Y MATERIALES ";

        //

        //

        //Add RowSpan
        PdfGridCell gridCellx11 = pdfGrid.Rows[21].Cells[2];
        gridCellx11.ColumnSpan = 1;
        gridCellx11.RowSpan = 2;

        gridCellx11.StringFormat = Izquierda;
        gridCellx11.Value = $"   Material Bonete \n Identificación Bonete \n Presión de Prueba Hidráulica";


        //Add RowSpan
        PdfGridCell gridCellx21 = pdfGrid.Rows[21].Cells[3];
        gridCellx21.ColumnSpan = 3;
        gridCellx21.RowSpan = 2;

        gridCellx21.StringFormat = Izquierda;
        gridCellx21.Value = $"   RESP 4";

        //
        //

        //Add RowSpan
        PdfGridCell gridCellx22 = pdfGrid.Rows[23].Cells[0];
        gridCellx22.ColumnSpan = 2;
        gridCellx22.RowSpan = 4;

        gridCellx22.StringFormat = Izquierda;

        gridCellx22.Value = new PdfTextElement("ENSAYOS OPERACIONALES EN BANCO HIDRONEUMÁTICO - FLUIDO AIRE A TEMP. AMBIENTE ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);


        //Add RowSpan
        PdfGridCell gridCellx24 = pdfGrid.Rows[23].Cells[2];
        gridCellx24.ColumnSpan = 3;
        gridCellx24.RowSpan = 3;

        gridCellx24.StringFormat = Izquierda;
        gridCellx24.Value = $"  Calibracion a la presión segun ASME PTC-25.3: \n Ensayos de repetitividad (3): \n Control estanqueidad de asientos segun API 527:";

        //Add RowSpan
        PdfGridCell gridCellx27 = pdfGrid.Rows[23].Cells[5];
        gridCellx27.ColumnSpan = 1;
        gridCellx27.RowSpan = 3;

        gridCellx27.StringFormat = Izquierda;
        gridCellx27.Value = $"   resp 2";

        //Add RowSpan
        PdfGridCell gridCellx31 = pdfGrid.Rows[26].Cells[2];
        gridCellx31.ColumnSpan = 3;


        gridCellx31.StringFormat = Izquierda;
        gridCellx31.Value = $" Patrón Utilizado:";

        //Add RowSpan
        PdfGridCell gridCellx32 = pdfGrid.Rows[26].Cells[5];
        gridCellx32.ColumnSpan = 1;


        gridCellx32.StringFormat = Izquierda;
        gridCellx32.Value = $" res:";


        //Add RowSpan
        PdfGridCell gridCellx33 = pdfGrid.Rows[27].Cells[0];
        gridCellx33.ColumnSpan = 2;

        gridCellx33.StringFormat = Izquierda;
        gridCellx33.Value = new PdfTextElement("RESULTADO ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);


        //Add RowSpan
        PdfGridCell gridCellx34 = pdfGrid.Rows[27].Cells[2];
        gridCellx34.ColumnSpan = 4;

        gridCellx34.StringFormat = Izquierda;
        gridCellx34.Value = new PdfTextElement("res resultado ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);


        //Add RowSpan
        PdfGridCell gridCellx35 = pdfGrid.Rows[28].Cells[0];
        gridCellx35.ColumnSpan = 2;
        gridCellx35.RowSpan = 2;

        gridCellx35.StringFormat = Izquierda;
        gridCellx35.Value = new PdfTextElement("FIRMA INSPECTOR AERRE ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);

        //Add RowSpan
        PdfGridCell gridCellx36 = pdfGrid.Rows[28].Cells[2];
        gridCellx36.ColumnSpan = 4;
        gridCellx36.RowSpan = 2;

        gridCellx36.StringFormat = Izquierda;
        gridCellx36.Value = new PdfBitmap(IMR) ;
        //Add RowSpan
        PdfGridCell gridCellx37 = pdfGrid.Rows[30].Cells[0];
        gridCellx37.ColumnSpan = 2;
        gridCellx37.StringFormat = Izquierda;
        gridCellx37.Value = new PdfTextElement("PRECINTO Nro.", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Centrado);


        //Add RowSpan
        PdfGridCell gridCellx38 = pdfGrid.Rows[30].Cells[2];
        gridCellx38.ColumnSpan = 4;

        gridCellx38.StringFormat = Izquierda;
        gridCellx38.Value = $"   AERRE 00024 ";

        //Add RowSpan
        PdfGridCell gridCell48 = pdfGrid.Rows[24].Cells[0];
        gridCell48.ColumnSpan = 6;
        gridCell48.StringFormat = Izquierda;
        //if (selectedRecord.TRABAJOSEFEC == "D")
        //{
        //    gridCell48.Value = $"   Trabajos efectuados: Desarme, limpieza, revisión de sus componentes, reacondicionamiento de asientos, rearmado, prueba, calibración.";
        //}
        //else if (selectedRecord.TRABAJOSEFEC == "V")
        //{
        //    gridCell48.Value = $"   Trabajos efectuados: Unicamente verificación de funcionamiento y calibración.";
        //}
        //else
        //{
        //    gridCell48.Value = $"   Trabajos efectuados: {selectedRecord.TRABAJOSEFEC}";
        //}





        //Add RowSpan
        PdfGridCell gridCell54 = pdfGrid.Rows[29].Cells[0];
        gridCell54.ColumnSpan = 3;
        gridCell54.StringFormat = Izquierda;
        gridCell54.Value = new PdfTextElement($"   Acta: ", font, new PdfPen(PdfColor.Empty), PdfBrushes.Black, Izquierda);



        //Add RowSpan
        PdfGridCell gridCell58 = pdfGrid.Rows[31].Cells[0];
        gridCell58.ColumnSpan = 6;

        gridCell58.StringFormat = Centrado;
        gridCell58.Value = "GARANTIA: \n Los productos están garantizados por el término de 12 meses a partir de la salida de fábrica, contra todo defecto de materiales y / o fabricación, limitada a la reposición sin cargo en nuestra fábrica de un elemento similar. Esta garantía no ampara el desgaste anormal por la utilización en condiciones distintas a las especificadas";

        //Draw the PdfGrid
        pdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, 0));
        //Saving the PDF to the MemoryStream
        MemoryStream stream = new MemoryStream();
        document.Save(stream);
        //Set the position as '0'
        stream.Position = 0;
        //Close the document
        document.Close(true);
        await JS.SaveAs($" Certificado" + ".pdf", stream.ToArray());
    }
    protected async Task AgregarValores()
    {
        CantidadMostrar = CantidadMostrar + 100;
        if (BoxPedido != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/Vacio/Vacio/{CantidadMostrar}");
        }
        else if (BoxCliente != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/{BoxCliente}/Vacio/{CantidadMostrar}");
        }
        else if (BoxCodigo != "")
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/Vacio/Vacio/{BoxCodigo}/{CantidadMostrar}");
        }
        else
        {
            Busquedalist = await Http.GetFromJsonAsync<List<Pedidos>>($"api/Pedidos/BuscarTrazabilidad/{BoxPedido}/{BoxCliente}/{BoxCodigo}/{CantidadMostrar}");
        }
    }
}
